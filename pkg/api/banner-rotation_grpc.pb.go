// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: banner-rotation.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BannerRotationClient is the client API for BannerRotation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BannerRotationClient interface {
	AddBannerDisplay(ctx context.Context, in *AddBannerDisplayRequest, opts ...grpc.CallOption) (*AddBannerDisplayResponse, error)
	DeleteBannerDisplay(ctx context.Context, in *DeleteBannerDisplayRequest, opts ...grpc.CallOption) (*DeleteBannerDisplayResponse, error)
	TrackClick(ctx context.Context, in *TrackClickRequest, opts ...grpc.CallOption) (*TrackClickResponse, error)
	GetBannerDisplay(ctx context.Context, in *GetBannerDisplayRequest, opts ...grpc.CallOption) (*GetBannerDisplayRequest, error)
}

type bannerRotationClient struct {
	cc grpc.ClientConnInterface
}

func NewBannerRotationClient(cc grpc.ClientConnInterface) BannerRotationClient {
	return &bannerRotationClient{cc}
}

func (c *bannerRotationClient) AddBannerDisplay(ctx context.Context, in *AddBannerDisplayRequest, opts ...grpc.CallOption) (*AddBannerDisplayResponse, error) {
	out := new(AddBannerDisplayResponse)
	err := c.cc.Invoke(ctx, "/banner_rotation.BannerRotation/AddBannerDisplay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerRotationClient) DeleteBannerDisplay(ctx context.Context, in *DeleteBannerDisplayRequest, opts ...grpc.CallOption) (*DeleteBannerDisplayResponse, error) {
	out := new(DeleteBannerDisplayResponse)
	err := c.cc.Invoke(ctx, "/banner_rotation.BannerRotation/DeleteBannerDisplay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerRotationClient) TrackClick(ctx context.Context, in *TrackClickRequest, opts ...grpc.CallOption) (*TrackClickResponse, error) {
	out := new(TrackClickResponse)
	err := c.cc.Invoke(ctx, "/banner_rotation.BannerRotation/TrackClick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerRotationClient) GetBannerDisplay(ctx context.Context, in *GetBannerDisplayRequest, opts ...grpc.CallOption) (*GetBannerDisplayRequest, error) {
	out := new(GetBannerDisplayRequest)
	err := c.cc.Invoke(ctx, "/banner_rotation.BannerRotation/GetBannerDisplay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BannerRotationServer is the server API for BannerRotation service.
// All implementations must embed UnimplementedBannerRotationServer
// for forward compatibility
type BannerRotationServer interface {
	AddBannerDisplay(context.Context, *AddBannerDisplayRequest) (*AddBannerDisplayResponse, error)
	DeleteBannerDisplay(context.Context, *DeleteBannerDisplayRequest) (*DeleteBannerDisplayResponse, error)
	TrackClick(context.Context, *TrackClickRequest) (*TrackClickResponse, error)
	GetBannerDisplay(context.Context, *GetBannerDisplayRequest) (*GetBannerDisplayRequest, error)
	mustEmbedUnimplementedBannerRotationServer()
}

// UnimplementedBannerRotationServer must be embedded to have forward compatible implementations.
type UnimplementedBannerRotationServer struct {
}

func (UnimplementedBannerRotationServer) AddBannerDisplay(context.Context, *AddBannerDisplayRequest) (*AddBannerDisplayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBannerDisplay not implemented")
}
func (UnimplementedBannerRotationServer) DeleteBannerDisplay(context.Context, *DeleteBannerDisplayRequest) (*DeleteBannerDisplayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBannerDisplay not implemented")
}
func (UnimplementedBannerRotationServer) TrackClick(context.Context, *TrackClickRequest) (*TrackClickResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackClick not implemented")
}
func (UnimplementedBannerRotationServer) GetBannerDisplay(context.Context, *GetBannerDisplayRequest) (*GetBannerDisplayRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBannerDisplay not implemented")
}
func (UnimplementedBannerRotationServer) mustEmbedUnimplementedBannerRotationServer() {}

// UnsafeBannerRotationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BannerRotationServer will
// result in compilation errors.
type UnsafeBannerRotationServer interface {
	mustEmbedUnimplementedBannerRotationServer()
}

func RegisterBannerRotationServer(s grpc.ServiceRegistrar, srv BannerRotationServer) {
	s.RegisterService(&BannerRotation_ServiceDesc, srv)
}

func _BannerRotation_AddBannerDisplay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBannerDisplayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerRotationServer).AddBannerDisplay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banner_rotation.BannerRotation/AddBannerDisplay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerRotationServer).AddBannerDisplay(ctx, req.(*AddBannerDisplayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerRotation_DeleteBannerDisplay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBannerDisplayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerRotationServer).DeleteBannerDisplay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banner_rotation.BannerRotation/DeleteBannerDisplay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerRotationServer).DeleteBannerDisplay(ctx, req.(*DeleteBannerDisplayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerRotation_TrackClick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackClickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerRotationServer).TrackClick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banner_rotation.BannerRotation/TrackClick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerRotationServer).TrackClick(ctx, req.(*TrackClickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerRotation_GetBannerDisplay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBannerDisplayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerRotationServer).GetBannerDisplay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banner_rotation.BannerRotation/GetBannerDisplay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerRotationServer).GetBannerDisplay(ctx, req.(*GetBannerDisplayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BannerRotation_ServiceDesc is the grpc.ServiceDesc for BannerRotation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BannerRotation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "banner_rotation.BannerRotation",
	HandlerType: (*BannerRotationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBannerDisplay",
			Handler:    _BannerRotation_AddBannerDisplay_Handler,
		},
		{
			MethodName: "DeleteBannerDisplay",
			Handler:    _BannerRotation_DeleteBannerDisplay_Handler,
		},
		{
			MethodName: "TrackClick",
			Handler:    _BannerRotation_TrackClick_Handler,
		},
		{
			MethodName: "GetBannerDisplay",
			Handler:    _BannerRotation_GetBannerDisplay_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "banner-rotation.proto",
}
