// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: banner-rotation.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddBannerDisplayRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddBannerDisplayRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddBannerDisplayRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddBannerDisplayRequestMultiError, or nil if none found.
func (m *AddBannerDisplayRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddBannerDisplayRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBannerID() <= 0 {
		err := AddBannerDisplayRequestValidationError{
			field:  "BannerID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSlotID() <= 0 {
		err := AddBannerDisplayRequestValidationError{
			field:  "SlotID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddBannerDisplayRequestMultiError(errors)
	}

	return nil
}

// AddBannerDisplayRequestMultiError is an error wrapping multiple validation
// errors returned by AddBannerDisplayRequest.ValidateAll() if the designated
// constraints aren't met.
type AddBannerDisplayRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddBannerDisplayRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddBannerDisplayRequestMultiError) AllErrors() []error { return m }

// AddBannerDisplayRequestValidationError is the validation error returned by
// AddBannerDisplayRequest.Validate if the designated constraints aren't met.
type AddBannerDisplayRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddBannerDisplayRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddBannerDisplayRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddBannerDisplayRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddBannerDisplayRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddBannerDisplayRequestValidationError) ErrorName() string {
	return "AddBannerDisplayRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddBannerDisplayRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddBannerDisplayRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddBannerDisplayRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddBannerDisplayRequestValidationError{}

// Validate checks the field values on AddBannerDisplayResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddBannerDisplayResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddBannerDisplayResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddBannerDisplayResponseMultiError, or nil if none found.
func (m *AddBannerDisplayResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddBannerDisplayResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddBannerDisplayResponseMultiError(errors)
	}

	return nil
}

// AddBannerDisplayResponseMultiError is an error wrapping multiple validation
// errors returned by AddBannerDisplayResponse.ValidateAll() if the designated
// constraints aren't met.
type AddBannerDisplayResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddBannerDisplayResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddBannerDisplayResponseMultiError) AllErrors() []error { return m }

// AddBannerDisplayResponseValidationError is the validation error returned by
// AddBannerDisplayResponse.Validate if the designated constraints aren't met.
type AddBannerDisplayResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddBannerDisplayResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddBannerDisplayResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddBannerDisplayResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddBannerDisplayResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddBannerDisplayResponseValidationError) ErrorName() string {
	return "AddBannerDisplayResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddBannerDisplayResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddBannerDisplayResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddBannerDisplayResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddBannerDisplayResponseValidationError{}

// Validate checks the field values on DeleteBannerDisplayRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBannerDisplayRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBannerDisplayRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBannerDisplayRequestMultiError, or nil if none found.
func (m *DeleteBannerDisplayRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBannerDisplayRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBannerID() <= 0 {
		err := DeleteBannerDisplayRequestValidationError{
			field:  "BannerID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSlotID() <= 0 {
		err := DeleteBannerDisplayRequestValidationError{
			field:  "SlotID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteBannerDisplayRequestMultiError(errors)
	}

	return nil
}

// DeleteBannerDisplayRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteBannerDisplayRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteBannerDisplayRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBannerDisplayRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBannerDisplayRequestMultiError) AllErrors() []error { return m }

// DeleteBannerDisplayRequestValidationError is the validation error returned
// by DeleteBannerDisplayRequest.Validate if the designated constraints aren't met.
type DeleteBannerDisplayRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBannerDisplayRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBannerDisplayRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBannerDisplayRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBannerDisplayRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBannerDisplayRequestValidationError) ErrorName() string {
	return "DeleteBannerDisplayRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBannerDisplayRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBannerDisplayRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBannerDisplayRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBannerDisplayRequestValidationError{}

// Validate checks the field values on DeleteBannerDisplayResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBannerDisplayResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBannerDisplayResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBannerDisplayResponseMultiError, or nil if none found.
func (m *DeleteBannerDisplayResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBannerDisplayResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteBannerDisplayResponseMultiError(errors)
	}

	return nil
}

// DeleteBannerDisplayResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteBannerDisplayResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteBannerDisplayResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBannerDisplayResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBannerDisplayResponseMultiError) AllErrors() []error { return m }

// DeleteBannerDisplayResponseValidationError is the validation error returned
// by DeleteBannerDisplayResponse.Validate if the designated constraints
// aren't met.
type DeleteBannerDisplayResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBannerDisplayResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBannerDisplayResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBannerDisplayResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBannerDisplayResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBannerDisplayResponseValidationError) ErrorName() string {
	return "DeleteBannerDisplayResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBannerDisplayResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBannerDisplayResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBannerDisplayResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBannerDisplayResponseValidationError{}

// Validate checks the field values on TrackClickRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TrackClickRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrackClickRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TrackClickRequestMultiError, or nil if none found.
func (m *TrackClickRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TrackClickRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBannerID() <= 0 {
		err := TrackClickRequestValidationError{
			field:  "BannerID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSlotID() <= 0 {
		err := TrackClickRequestValidationError{
			field:  "SlotID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSocialGroup() <= 0 {
		err := TrackClickRequestValidationError{
			field:  "SocialGroup",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TrackClickRequestMultiError(errors)
	}

	return nil
}

// TrackClickRequestMultiError is an error wrapping multiple validation errors
// returned by TrackClickRequest.ValidateAll() if the designated constraints
// aren't met.
type TrackClickRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrackClickRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrackClickRequestMultiError) AllErrors() []error { return m }

// TrackClickRequestValidationError is the validation error returned by
// TrackClickRequest.Validate if the designated constraints aren't met.
type TrackClickRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrackClickRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrackClickRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrackClickRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrackClickRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrackClickRequestValidationError) ErrorName() string {
	return "TrackClickRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TrackClickRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrackClickRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrackClickRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrackClickRequestValidationError{}

// Validate checks the field values on TrackClickResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TrackClickResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrackClickResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TrackClickResponseMultiError, or nil if none found.
func (m *TrackClickResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TrackClickResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TrackClickResponseMultiError(errors)
	}

	return nil
}

// TrackClickResponseMultiError is an error wrapping multiple validation errors
// returned by TrackClickResponse.ValidateAll() if the designated constraints
// aren't met.
type TrackClickResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrackClickResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrackClickResponseMultiError) AllErrors() []error { return m }

// TrackClickResponseValidationError is the validation error returned by
// TrackClickResponse.Validate if the designated constraints aren't met.
type TrackClickResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrackClickResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrackClickResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrackClickResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrackClickResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrackClickResponseValidationError) ErrorName() string {
	return "TrackClickResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TrackClickResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrackClickResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrackClickResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrackClickResponseValidationError{}

// Validate checks the field values on GetBannerDisplayRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBannerDisplayRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBannerDisplayRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBannerDisplayRequestMultiError, or nil if none found.
func (m *GetBannerDisplayRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBannerDisplayRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSlotID() <= 0 {
		err := GetBannerDisplayRequestValidationError{
			field:  "SlotID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSocialGroup() <= 0 {
		err := GetBannerDisplayRequestValidationError{
			field:  "SocialGroup",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetBannerDisplayRequestMultiError(errors)
	}

	return nil
}

// GetBannerDisplayRequestMultiError is an error wrapping multiple validation
// errors returned by GetBannerDisplayRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBannerDisplayRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBannerDisplayRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBannerDisplayRequestMultiError) AllErrors() []error { return m }

// GetBannerDisplayRequestValidationError is the validation error returned by
// GetBannerDisplayRequest.Validate if the designated constraints aren't met.
type GetBannerDisplayRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBannerDisplayRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBannerDisplayRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBannerDisplayRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBannerDisplayRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBannerDisplayRequestValidationError) ErrorName() string {
	return "GetBannerDisplayRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBannerDisplayRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBannerDisplayRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBannerDisplayRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBannerDisplayRequestValidationError{}

// Validate checks the field values on GetBannerDisplayResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBannerDisplayResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBannerDisplayResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBannerDisplayResponseMultiError, or nil if none found.
func (m *GetBannerDisplayResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBannerDisplayResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBannerID() <= 0 {
		err := GetBannerDisplayResponseValidationError{
			field:  "BannerID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetBannerDisplayResponseMultiError(errors)
	}

	return nil
}

// GetBannerDisplayResponseMultiError is an error wrapping multiple validation
// errors returned by GetBannerDisplayResponse.ValidateAll() if the designated
// constraints aren't met.
type GetBannerDisplayResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBannerDisplayResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBannerDisplayResponseMultiError) AllErrors() []error { return m }

// GetBannerDisplayResponseValidationError is the validation error returned by
// GetBannerDisplayResponse.Validate if the designated constraints aren't met.
type GetBannerDisplayResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBannerDisplayResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBannerDisplayResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBannerDisplayResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBannerDisplayResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBannerDisplayResponseValidationError) ErrorName() string {
	return "GetBannerDisplayResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBannerDisplayResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBannerDisplayResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBannerDisplayResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBannerDisplayResponseValidationError{}
